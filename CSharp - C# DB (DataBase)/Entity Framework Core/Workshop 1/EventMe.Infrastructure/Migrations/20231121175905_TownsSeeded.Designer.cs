// <auto-generated />
using System;
using EventMe.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EventMe.Infrastructure.Migrations
{
    [DbContext(typeof(EventMeDbContext))]
    [Migration("20231121175905_TownsSeeded")]
    partial class TownsSeeded
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.25")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EventMe.Infrastructure.Data.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Идентификатор на мястото");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Адрес на мястото");

                    b.Property<int>("TownId")
                        .HasColumnType("int")
                        .HasComment("Идентификатор на града");

                    b.HasKey("Id");

                    b.HasIndex("TownId");

                    b.ToTable("Addresses");

                    b.HasComment("Място на провеждане на събитието");
                });

            modelBuilder.Entity("EventMe.Infrastructure.Data.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Идентификатор на събитието");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Дата на изтриване");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2")
                        .HasComment("Край на събитието");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasComment("Събитието е активно");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Име на събитието");

                    b.Property<int>("PlaceId")
                        .HasColumnType("int")
                        .HasComment("Идентификатор на мястото");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2")
                        .HasComment("Начало на събитието");

                    b.HasKey("Id");

                    b.HasIndex("PlaceId");

                    b.ToTable("Events");

                    b.HasComment("Събитие");
                });

            modelBuilder.Entity("EventMe.Infrastructure.Data.Models.Town", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("Идентификатор на града");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Име на града");

                    b.HasKey("Id");

                    b.ToTable("Towns");

                    b.HasComment("Град");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "София"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Пловдив"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Варна"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Бутгас"
                        });
                });

            modelBuilder.Entity("EventMe.Infrastructure.Data.Models.Address", b =>
                {
                    b.HasOne("EventMe.Infrastructure.Data.Models.Town", "Town")
                        .WithMany()
                        .HasForeignKey("TownId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Town");
                });

            modelBuilder.Entity("EventMe.Infrastructure.Data.Models.Event", b =>
                {
                    b.HasOne("EventMe.Infrastructure.Data.Models.Address", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Place");
                });
#pragma warning restore 612, 618
        }
    }
}
